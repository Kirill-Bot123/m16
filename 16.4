from fastapi import FastAPI, Path, HTTPException
from typing import Annotated
from pydantic import BaseModel

app = FastAPI()
users = []


class User(BaseModel):
    id: int = None
    age: int
    username: str


@app.get('/users')
async def post_massage() -> list:
    return users


@app.post('/user/{username}/{age}')
async def poster(
        username: Annotated[str, Path(min_length=5, max_length=20, description="Enter username", )],
        age: Annotated[int, Path(ge=18, le=120, description="Enter age")]) -> str:
    user_id = str(int(max(users, key=int)) + 1)
    users[user_id] = f'Имя: {username}, Возраст: {age}'
    return f'User {user_id} is registered'


@app.put('/user/{user_id}/{username}/{age}')
async def update_user(
        user_id: Annotated[int, Path(gt=0, description="Enter user_id")],
        username: Annotated[str, Path(min_length=5, max_length=20, description="Enter username",
                                      pattern="^[а-яА-ЯёЁa-zA-Z\\S]+$")],
        age: Annotated[int, Path(ge=18, le=120, description="Enter age")]) -> str:
    user_id = str(user_id)  
    if user_id in users:
        users[user_id] = f"Имя: {username}, возраст: {age}"
        return f"User {user_id} has been updated"
    raise HTTPException(status_code=404, detail=f"User {user_id} not found")


@app.delete("/user/{user_id}")
async def delete_user(user_id: Annotated[int, Path(description="ID user")]) -> str:
    user_id = str(user_id)  
    if user_id in users:
        del users[user_id]  
        return f"User {user_id} has been deleted"
    raise HTTPException(status_code=404, detail=f"User {user_id} not found")
